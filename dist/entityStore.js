var EntityStore = (function () {
    function EntityStore(idKey) {
        if (idKey === void 0) { idKey = "id"; }
        this._store = {};
        this._array = [];
        this._idKey = idKey;
    }
    EntityStore.prototype.clear = function () {
        var _this = this;
        this._array.length = 0;
        Object.keys(this._store).forEach(function (key) {
            delete _this._store[key];
        });
    };
    EntityStore.prototype.findItem = function (key) {
        if (key == null || key.length === 0) {
            return null;
        }
        return this._store[key];
    };
    EntityStore.prototype.addItem = function (item) {
        if (this.findObject(item) == null) {
            this.insertItem(item);
        }
    };
    EntityStore.prototype.addItems = function (items) {
        var _this = this;
        items.forEach(function (item) {
            _this.addItem(item);
        });
    };
    EntityStore.prototype.removeItem = function (item) {
        var obj = this.findObject(item);
        if (obj != null) {
            this.deleteItem(obj);
        }
        return obj;
    };
    EntityStore.prototype.removeItems = function (items) {
        var _this = this;
        return items.map(function (item) {
            return _this.removeItem(item);
        });
    };
    EntityStore.prototype.where = function (fcn) {
        return this._array.filter(function (item) {
            return fcn(item);
        });
    };
    Object.defineProperty(EntityStore.prototype, "items", {
        get: function () {
            return this._array;
        },
        enumerable: true,
        configurable: true
    });
    EntityStore.prototype.findObject = function (item) {
        return this.findItem(this.getKey(item));
    };
    EntityStore.prototype.getKey = function (item) {
        if (item == null) {
            return null;
        }
        return item[this._idKey];
    };
    EntityStore.prototype.insertItem = function (item) {
        this._array.push(item);
        this._store[item[this._idKey]] = item;
    };
    EntityStore.prototype.deleteItem = function (item) {
        if (item == null) {
            return;
        }
        var key = item[this._idKey];
        if (key == null) {
            return;
        }
        var index = this._array.indexOf(item);
        if (index > -1) {
            this._array.splice(index, 1);
        }
        if (key in this._store) {
            delete this._store[key];
        }
    };
    return EntityStore;
}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbnRpdHlTdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFlQTtJQUtJLHFCQUFZLEtBQW9CO1FBQXBCLHFCQUFvQixHQUFwQixZQUFvQjtRQUp4QixXQUFNLEdBQVEsRUFBRSxDQUFDO1FBQ2pCLFdBQU0sR0FBYSxFQUFFLENBQUM7UUFJMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVNLDJCQUFLLEdBQVo7UUFBQSxpQkFNQztRQUxHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUV2QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHO1lBQ2pDLE9BQU8sS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSw4QkFBUSxHQUFmLFVBQWdCLEdBQVc7UUFDdkIsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVNLDZCQUFPLEdBQWQsVUFBZSxJQUFPO1FBQ2xCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLENBQUM7SUFDTCxDQUFDO0lBRU0sOEJBQVEsR0FBZixVQUFnQixLQUFlO1FBQS9CLGlCQUlDO1FBSEcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQUk7WUFDZixLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLGdDQUFVLEdBQWpCLFVBQWtCLElBQU87UUFDckIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsQ0FBQztRQUVELE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDZixDQUFDO0lBRU0saUNBQVcsR0FBbEIsVUFBbUIsS0FBZTtRQUFsQyxpQkFJQztRQUhHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSTtZQUNsQixNQUFNLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSwyQkFBSyxHQUFaLFVBQWEsR0FBcUI7UUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSTtZQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELHNCQUFXLDhCQUFLO2FBQWhCO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdkIsQ0FBQzs7O09BQUE7SUFJTyxnQ0FBVSxHQUFsQixVQUFtQixJQUFPO1FBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU8sNEJBQU0sR0FBZCxVQUFlLElBQU87UUFDbEIsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDZixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxNQUFNLENBQU8sSUFBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU8sZ0NBQVUsR0FBbEIsVUFBbUIsSUFBTztRQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsTUFBTSxDQUFPLElBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDakQsQ0FBQztJQUVPLGdDQUFVLEdBQWxCLFVBQW1CLElBQU87UUFDdEIsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDZixNQUFNLENBQUM7UUFDWCxDQUFDO1FBRUQsSUFBSSxHQUFHLEdBQVMsSUFBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVuQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNkLE1BQU0sQ0FBQztRQUNYLENBQUM7UUFFRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDckIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUM7SUFDTCxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQXhHQSxBQXdHQyxJQUFBIiwiZmlsZSI6ImVudGl0eVN0b3JlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIFdoZXJlRnVuY3Rpb248VD4ge1xuICAgIChvYmo6IFQpOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgSUVudGl0eVN0b3JlPFQ+IHtcbiAgICBjbGVhcigpOiB2b2lkO1xuICAgIGZpbmRJdGVtKGtleTogc3RyaW5nKTogVDtcbiAgICBhZGRJdGVtKGl0ZW06IFQpOiB2b2lkO1xuICAgIGFkZEl0ZW1zKGl0ZW1zOiBBcnJheTxUPik6IHZvaWQ7XG4gICAgcmVtb3ZlSXRlbShpdGVtOiBUKTogdm9pZDtcbiAgICByZW1vdmVJdGVtcyhpdGVtczogQXJyYXk8VD4pOiBBcnJheTxUPjtcbiAgICB3aGVyZShmY246IFdoZXJlRnVuY3Rpb248VD4pOiBBcnJheTxUPjtcbiAgICBpdGVtczogQXJyYXk8VD47XG59XG5cbmNsYXNzIEVudGl0eVN0b3JlPFQ+IGltcGxlbWVudHMgSUVudGl0eVN0b3JlPFQ+IHtcbiAgICBwcml2YXRlIF9zdG9yZTogYW55ID0ge307XG4gICAgcHJpdmF0ZSBfYXJyYXk6IEFycmF5PFQ+ID0gW107XG4gICAgcHJpdmF0ZSBfaWRLZXk6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGlkS2V5OiBzdHJpbmcgPSBcImlkXCIpIHtcbiAgICAgICAgdGhpcy5faWRLZXkgPSBpZEtleTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2FycmF5Lmxlbmd0aCA9IDA7XG5cbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5fc3RvcmUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N0b3JlW2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBmaW5kSXRlbShrZXk6IHN0cmluZyk6IFQge1xuICAgICAgICBpZiAoa2V5ID09IG51bGwgfHwga2V5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fc3RvcmVba2V5XTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkSXRlbShpdGVtOiBUKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmZpbmRPYmplY3QoaXRlbSkgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRJdGVtKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEl0ZW1zKGl0ZW1zOiBBcnJheTxUPik6IHZvaWQge1xuICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZEl0ZW0oaXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVJdGVtKGl0ZW06IFQpOiBUIHtcbiAgICAgICAgbGV0IG9iaiA9IHRoaXMuZmluZE9iamVjdChpdGVtKTtcblxuICAgICAgICBpZiAob2JqICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlSXRlbShvYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlSXRlbXMoaXRlbXM6IEFycmF5PFQ+KTogQXJyYXk8VD4ge1xuICAgICAgICByZXR1cm4gaXRlbXMubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVJdGVtKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgd2hlcmUoZmNuOiBXaGVyZUZ1bmN0aW9uPFQ+KTogQXJyYXk8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXJyYXkuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZmNuKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGl0ZW1zKCk6IEFycmF5PFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5O1xuICAgIH1cblxuICAgIC8vIEludGVybmFsXG5cbiAgICBwcml2YXRlIGZpbmRPYmplY3QoaXRlbTogVCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5kSXRlbSh0aGlzLmdldEtleShpdGVtKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRLZXkoaXRlbTogVCk6IHN0cmluZyB7XG4gICAgICAgIGlmIChpdGVtID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICg8YW55Pml0ZW0pW3RoaXMuX2lkS2V5XTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluc2VydEl0ZW0oaXRlbTogVCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hcnJheS5wdXNoKGl0ZW0pO1xuXG4gICAgICAgIHRoaXMuX3N0b3JlWyg8YW55Pml0ZW0pW3RoaXMuX2lkS2V5XV0gPSBpdGVtO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVsZXRlSXRlbShpdGVtOiBUKTogdm9pZCB7XG4gICAgICAgIGlmIChpdGVtID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBrZXkgPSAoPGFueT5pdGVtKVt0aGlzLl9pZEtleV07XG5cbiAgICAgICAgaWYgKGtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLl9hcnJheS5pbmRleE9mKGl0ZW0pO1xuXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9hcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleSBpbiB0aGlzLl9zdG9yZSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N0b3JlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59Il19
